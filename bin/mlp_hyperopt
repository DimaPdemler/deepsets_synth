#!/usr/bin/env python

# Run the training of the interaction network..
import argparse
import os
import sys
sys.path.append("..")

from mlp.hyperparam_optimisation import main
parser = argparse.ArgumentParser(formatter_class=argparse.
                                 ArgumentDefaultsHelpFormatter)
parser.add_argument("--test_kfold", type=int, default=-1,
                    help="Which kfold to use for test.")
parser.add_argument("--gpu", type=str, default="",
                    help="Sets the number of the GPU to run on.")
args = parser.parse_args()

if args.gpu:
    os.environ["CUDA_VISIBLE_DEVICES"] = args.gpu

# Import the data.
kfolds = 5
nconst = 32

data_folder_path = '../../ds_data'
jets_path = f'jets_{nconst}constituents_ptetaphi_robust_fast'

train_kfolds = [kfold for kfold in range(kfolds) if kfold != args.test_kfold]
test_kfold = args.test_kfold
data_hyperparams = {
    "fpath":        os.path.join(data_folder_path, jets_path),
    "fnames_train": [f'jet_images_c{nconst}_minpt2.0_ptetaphi_robust_fast_{train_kfold}'
                     for train_kfold in train_kfolds],
    "fname_test":   f'jet_images_c{nconst}_minpt2.0_ptetaphi_robust_fast_{test_kfold}',
}

training_hyperparams = {
    "batch":        [64, 128, 256, 512, 1024],
    "epochs":       150,
    "lr":           [0.0001, 0.01],
}

compilation_hyperparams = {
    "optimizer": ['adam'],
    "loss":      'softmax_with_crossentropy',
    "metrics":   ['categorical_accuracy'],
}

model_hyperparams = {
    "nlayers": [5, 6, 7, 8, 9, 10, 11],
    "nnodes": [32, 44, 64, 84],
    "l1_coeff": [0.00001, 0.001],
    # "dropout_rate": [0, 1],
    "activ": ['relu', 'tanh'],
}

args = {
    "study_name":           f'{nconst}const_ptetaphi_constrainedl1',
    # "study_name":           f'test',
    "storage":              'mlp_reg',
    "outdir":               'mlp_hyperopt',
    "mlp_type":             'mlp_reg',
    "data_hyperparams":     data_hyperparams,
    "training_hyperparams": training_hyperparams,
    "model_hyperparams":    model_hyperparams,
    "compilation":          compilation_hyperparams,
}

main(args)
